RECENT CHANGES:
* (2 February 2023): Initial
* (3 February 2023): Update to move $ref to the state section to create a uniform codeScriptHash. Fixed a bug with logic.
* (4 February 2023): Remove unncessary check for OP_PUSHINPUTREFSINGLETON on the inputs.

<pre>
  REP: 21
  Layer: Script
  Title: Non-Fungible Tokens (NFT)
  Author: Arvivi
  Comments-Summary: No comments yet.
  Comments-URI: https://github.com/radiantblockchain/reps/wiki/Comments:REP-0021
  Status: Process
  Type: Draft
  Created: 2022-11-30
  License: BSD-2-Clause
</pre>

==Abstract==

Introduce a simple and powerful contract template that allows the minting of a Non-Fungible Token that is backed by an arbitrary amount of Radiant photons.

Scalable peer-to-peer non-fungible tokens gives rise to all kinds of use cases such as social media, digital identity, events, tickets, coupons and digital collectibles.

==Copyright==

This REP is licensed under the 2-clause BSD license.

==Motivation==

The motivation is to deliver a scalable peer-to-peer non-fungible token protocol on Radiant.

===Use cases===

Social media, digital identity, events, tickets, coupons and digital collectibles.

==RadiantScript==

<pre>
pragma radiantscript ^0.1.0;

// There can only be one unique output that contains the reference, using the singleton pattern
contract NonFungibleToken(bytes36 constant $ref, bytes20 constant $pkh)(sig s, pubkey pk) {
    // The state code runs for every method
    state {
        require(hash160(pk) == $pkh);
        require(checkSig(s, pk));
        pushInputRefSingleton($ref);
    }

    // Transfer the NFT to a new owner, ensuring that OP_PUSHINPUTREFSINGLETON is enforced
    function transfer() {
        require(tx.outputs.refType($ref) == 2); 
    }
    // Destroy the NFT, ensuring there the reference cannot be passed on by using
    // OP_DISALLOWPUSHINPUTREF and OP_DISALLOWPUSHINPUTREFSIBLING
    function melt() {
        require(tx.outputs.length > 0);
        require(tx.outputs[0].value >= 0);
        require(tx.outputs[0].lockingBytecode == bytes(0x6ad2) + $ref + bytes(0xd3) + $ref);
    }
}
</pre>

==Raw Script==

Let <b>$pkh</b> the public key hash of the current owner of the nft.

Let <b>$ref</b> be the unique (singleton) reference of the minting of the nft.

<pre>
// P2PKH. Could have other scripts here
OP_DUP OP_HASH160 $pkh OP_EQUALVERIFY OP_CHECKSIGVERIFY 
// Singleton Token ref
OP_PUSHINPUTREFSINGLETON $ref OP_DROP 
OP_STATESEPARATOR 

// The transfer function requires that there is exactly one output that contains another OP_PUSHINPUTREFSINGLETON
OP_DUP OP_0 OP_NUMEQUAL 
OP_IF 
  $ref OP_REFTYPE_OUTPUT OP_2 OP_NUMEQUAL OP_NIP 
OP_ELSE 
  // Alternatively, the owner of the token can chose to melt/destroy their NFT
  OP_1 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_0 OP_GREATERTHAN OP_VERIFY 
  OP_0 OP_OUTPUTVALUE OP_0 OP_GREATERTHANOREQUAL OP_VERIFY 
  OP_0 OP_OUTPUTBYTECODE 6ad2 $ref OP_CAT d3 OP_CAT $ref OP_CAT OP_EQUAL 
OP_ENDIF
</pre>

===Compiled with RadiantScript Interpretor===

<pre>
cashc % node ./dist/main/cashc-cli.js ./contracts/nonfungible.rad
{
  "version": 9,
  "compilerVersion": "radc 0.1.0",
  "contract": "NonFungibleToken",
  "abi": [
    {
      "type": "function",
      "name": "transfer",
      "index": 0,
      "params": [
        {
          "name": "s",
          "type": "Sig"
        },
        {
          "name": "pk",
          "type": "PubKey"
        }
      ]
    },
    {
      "type": "function",
      "name": "melt",
      "index": 1,
      "params": [
        {
          "name": "s",
          "type": "Sig"
        },
        {
          "name": "pk",
          "type": "PubKey"
        }
      ]
    },
    {
      "type": "constructor",
      "params": [
        {
          "name": "ref",
          "type": "bytes"
        },
        {
          "name": "pkh",
          "type": "Ripemd160"
        }
      ]
    }
  ],
  "asm": "OP_DUP OP_HASH160 $pkh OP_EQUALVERIFY OP_CHECKSIGVERIFY OP_PUSHINPUTREFSINGLETON $ref OP_DROP OP_STATESEPARATOR OP_DUP OP_0 OP_NUMEQUAL OP_IF $ref OP_REFTYPE_OUTPUT OP_2 OP_NUMEQUAL OP_NIP OP_ELSE OP_1 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_0 OP_GREATERTHAN OP_VERIFY OP_0 OP_OUTPUTVALUE OP_0 OP_GREATERTHANOREQUAL OP_VERIFY OP_0 OP_OUTPUTBYTECODE 6ad2 $ref OP_CAT d3 OP_CAT $ref OP_CAT OP_EQUAL OP_ENDIF",
  "hex": "76a9<pkh>88add8<ref>75bd76009c63<ref>da529c7767519dc400a06900cc00a26900cd026ad2<ref>7e01d37e<ref>7e8768"
}
</pre>

===Implications===

* Each NFT is backed by an arbitrary amount of photos (satoshis) to give intrinsic value to the item. The owner can melt/destroy the NFT at anytime and recover the original Radiant photos, ending the lifecycle of the NFT
* The minting event establishes the unique $ref for the lifetime of the tokens.

==Open Questions==

* Should define the format of the deploy/mint NFT transaction. Perhaps use an OP_RETURN in a secondary output that contains a JSON blob of the form:

<pre>
{
  "name": "RadiantInuNFT",
  "url": "...",
  "icon": "..."
  "issuer": "..."
}
</pre>

==Acknowledgements==
